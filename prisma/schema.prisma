// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Multi-vendor marketplace models for village shop
model User {
  id           String    @id @default(cuid())
  name         String
  email        String?   @unique
  houseNumber  String    @unique
  lineId       String?   @unique
  phone        String?
  address      String?
  role         UserRole  @default(CUSTOMER)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  shops        Shop[]    @relation("ShopOwner")
  orders       Order[]   @relation("CustomerOrders")
  
  // NextAuth.js relations
  accounts     Account[]
  sessions     Session[]

  @@map("users")
}

model Shop {
  id          String    @id @default(cuid())
  name        String
  description String?
  logoUrl     String?
  houseNumber String
  isActive    Boolean   @default(true)
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  owner       User      @relation("ShopOwner", fields: [ownerId], references: [id])
  products    Product[]
  orderItems  OrderItem[]

  @@map("shops")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Decimal   @db.Decimal(10, 2)
  imageUrls   String[]  @default([])
  stock       Int       @default(0)
  category    String?
  isAvailable Boolean   @default(true)
  shopId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  shop        Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id                 String       @id @default(cuid())
  customerId         String
  customerHouseNumber String
  deliveryTime       DateTime?
  totalAmount        Decimal      @db.Decimal(10, 2)
  status             OrderStatus  @default(PENDING)
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  
  // Relations
  customer           User         @relation("CustomerOrders", fields: [customerId], references: [id])
  orderItems         OrderItem[]
  paymentSlips       PaymentSlip[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  shopId    String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  status    OrderItemStatus @default(PENDING)
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  shop      Shop    @relation(fields: [shopId], references: [id])

  @@map("order_items")
}

model PaymentSlip {
  id        String           @id @default(cuid())
  orderId   String
  imageUrl  String
  status    PaymentStatus    @default(PENDING)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  // Relations
  order     Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_slips")
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  iconUrl     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("product_categories")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum OrderItemStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
}
